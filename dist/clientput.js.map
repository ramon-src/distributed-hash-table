{"version":3,"sources":["../clientput.js"],"names":["net","require","machines","versions","date","Date","dataToChange","key","value","getDate","getMonth","getFullYear","forEach","machine","console","log","ip","socket","Socket","buffer","connect","on","data","indexOf","toString","msg","substring","dataFromServer","JSON","parse","push","write","stringify"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,WAAWD,QAAQ,eAAR,CAAjB;;AAEA;;;AAGA,IAAIE,WAAW,EAAf;AACA,IAAIC,OAAO,IAAIC,IAAJ,EAAX;AACA,IAAIC,eAAe;AACfC,SAAK,OADU;AAEfC,WAAO,UAFQ;AAGfJ,UAAMA,KAAKK,OAAL,KAAiB,GAAjB,GAAuBL,KAAKM,QAAL,EAAvB,GAAyC,GAAzC,GAA+CN,KAAKO,WAAL;AAHtC,CAAnB;;AAMA;;;AAGAT,SAASA,QAAT,CAAkBU,OAAlB,CAA0B,UAAUC,OAAV,EAAmB;AACzCC,YAAQC,GAAR,CAAY,wBAAZ,EAAsCF,QAAQ,CAAR,EAAWG,EAAjD;;AAEA,QAAIC,SAAS,IAAIjB,IAAIkB,MAAR,EAAb;;AAEA,QAAIC,SAAS,EAAb;;AAEAF,WAAOG,OAAP,CAAeP,QAAQ,CAAR,EAAWG,EAA1B,EAA8B,WAA9B,EAA2C,YAAY;AACnDF,gBAAQC,GAAR,CAAY,6BAAZ;AACH,KAFD;;AAIAE,WAAOI,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAC9B,YAAIA,KAAKC,OAAL,CAAa,IAAb,IAAqB,CAAzB,EAA4B;AACxBJ,sBAAUG,IAAV;AACH,SAFD,MAEO;AACHA,mBAAOA,KAAKE,QAAL,EAAP;AACA,gBAAIC,MAAMN,SAASG,KAAKI,SAAL,CAAe,CAAf,EAAkBJ,KAAKC,OAAL,CAAa,IAAb,CAAlB,CAAnB;AACAJ,qBAASG,KAAKI,SAAL,CAAeJ,KAAKC,OAAL,CAAa,IAAb,IAAqB,CAApC,CAAT;AACA,gBAAII,iBAAiBC,KAAKC,KAAL,CAAWJ,GAAX,CAArB;;AAEAX,oBAAQC,GAAR,CAAYY,cAAZ;;AAEA,gBAAIA,eAAe,CAAf,KAAqBrB,aAAaC,GAAtC,EAA2C;AACvCJ,yBAAS2B,IAAT,CAAc,CAACjB,QAAQ,CAAR,EAAWG,EAAZ,EAAgBW,cAAhB,CAAd;AACH;AACDb,oBAAQC,GAAR,CAAYZ,QAAZ;AACH;AACJ,KAhBD;;AAkBAc,WAAOc,KAAP,CAAaH,KAAKI,SAAL,CAAe,CAAC,KAAD,EAAQ1B,YAAR,CAAf,IAAwC,IAArD;AAEH,CA/BD;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"clientput.js","sourcesContent":["const net = require(\"net\");\nconst machines = require(\"./machines.js\");\n\n// Create a socket (client) that connects to the server\n\n\nvar versions = [];\nvar date = new Date();\nvar dataToChange = {\n    key: 'three',\n    value: 'creating',\n    date: date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear()\n};\n\n/**\n * Get machines that match with element key\n */\nmachines.machines.forEach(function (machine) {\n    console.log(\"MÃ¡quina encontrada: %s\", machine[1].ip);\n\n    var socket = new net.Socket();\n\n    var buffer = '';\n\n    socket.connect(machine[1].ip, \"localhost\", function () {\n        console.log(\"Client: Connected to server\");\n    });\n\n    socket.on(\"data\", function (data) {\n        if (data.indexOf('\\n') < 0) {\n            buffer += data;\n        } else {\n            data = data.toString();\n            var msg = buffer + data.substring(0, data.indexOf('\\n'));\n            buffer = data.substring(data.indexOf('\\n') + 1);\n            var dataFromServer = JSON.parse(msg);\n\n            console.log(dataFromServer);\n\n            if (dataFromServer[0] == dataToChange.key) {\n                versions.push([machine[1].ip, dataFromServer]);\n            }\n            console.log(versions);\n        }\n    });\n\n    socket.write(JSON.stringify(['put', dataToChange]) + '\\n');\n\n});\n\n\n//\n// versions.forEach(function (machine){\n//\n//     var socket = new net.Socket();\n//\n//     var buffer = '';\n//\n//     socket.connect(machine[0], \"localhost\", function () {\n//         console.log(\"Client: Connected to server\");\n//     });\n//\n//     socket.on(\"data\", function (data) {\n//         if (data.indexOf('\\n') < 0) {\n//             buffer += data;\n//         } else {\n//             data = data.toString();\n//             var msg = buffer + data.substring(0, data.indexOf('\\n'));\n//             buffer = data.substring(data.indexOf('\\n') + 1);\n//             var dataFromServer = JSON.parse(msg);\n//\n//             console.log(dataFromServer);\n//\n//             if(dataFromServer[0] == dataToChange.key){\n//                 versions.push([machine[1].ip, dataFromServer]);\n//             }\n//         }\n//     });\n//\n//     socket.write(JSON.stringify(['put', dataToChange]) + '\\n');\n// });"]}