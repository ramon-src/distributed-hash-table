{"version":3,"sources":["../client.js"],"names":["net","require","machines","versions","date","Date","dataToChange","key","value","getDate","getMonth","getFullYear","collect_start","cb","collect","i","length","console","log","machine","ip","socket","Socket","buffer","connect","write","JSON","stringify","on","data","indexOf","toString","msg","substring","dataFromServer","parse","push","forEach"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,WAAWD,QAAQ,eAAR,CAAjB;;AAEA;;;AAGA,IAAIE,WAAW,EAAf;AACA,IAAIC,OAAO,IAAIC,IAAJ,EAAX;AACA,IAAIC,eAAe;AACfC,SAAK,KADU;AAEfC,WAAO,UAFQ;AAGfJ,UAAMA,KAAKK,OAAL,KAAiB,GAAjB,GAAuBL,KAAKM,QAAL,EAAvB,GAAyC,GAAzC,GAA+CN,KAAKO,WAAL;AAHtC,CAAnB;;AAMA;;;;AAIAC,gBAAgB,uBAAUV,QAAV,EAAoBW,EAApB,EAAwB;AACpCC,YAAQ,CAAR,EAAWZ,QAAX,EAAqB,EAArB,EAAyBW,EAAzB;AACH,CAFD;;AAIAC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAU,UAAUC,CAAV,EAAab,QAAb,EAAuBC,QAAvB,EAAiCU,EAAjC,EAAqC;;AAE3C,QAAIE,KAAKb,SAASc,MAAlB,EACIH,GAAGV,QAAH;;AAEJc,YAAQC,GAAR,CAAY,wBAAZ,EAAsCC,QAAQ,CAAR,EAAWC,EAAjD;;AAEA,QAAIC,SAAS,IAAIrB,IAAIsB,MAAR,EAAb;;AAEA,QAAIC,SAAS,EAAb;;AAEAF,WAAOG,OAAP,CAAeL,QAAQJ,CAAR,EAAWK,EAA1B,EAA8B,WAA9B,EAA2C,YAAY;AACnDH,gBAAQC,GAAR,CAAY,6BAAZ;AACAG,eAAOI,KAAP,CAAaC,KAAKC,SAAL,CAAe,CAAC,KAAD,EAAQrB,YAAR,CAAf,IAAwC,IAArD;AACH,KAHD;;AAKAe,WAAOO,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAC9B,YAAIA,KAAKC,OAAL,CAAa,IAAb,IAAqB,CAAzB,EAA4B;AACxBP,sBAAUM,IAAV;AACH,SAFD,MAEO;AACHA,mBAAOA,KAAKE,QAAL,EAAP;AACA,gBAAIC,MAAMT,SAASM,KAAKI,SAAL,CAAe,CAAf,EAAkBJ,KAAKC,OAAL,CAAa,IAAb,CAAlB,CAAnB;AACAP,qBAASM,KAAKI,SAAL,CAAeJ,KAAKC,OAAL,CAAa,IAAb,IAAqB,CAApC,CAAT;AACA,gBAAII,iBAAiBR,KAAKS,KAAL,CAAWH,GAAX,CAArB;;AAEAf,oBAAQC,GAAR,CAAYgB,cAAZ;;AAEA,gBAAIA,eAAe,CAAf,KAAqB5B,aAAaC,GAAtC,EAA2C;AACvCJ,yBAASiC,IAAT,CAAc,CAACjB,QAAQ,CAAR,EAAWC,EAAZ,EAAgBc,cAAhB,CAAd;AACH;;AAEDpB,oBAAQC,IAAE,CAAV,EAAab,QAAb,EAAuBC,QAAvB,EAAiCU,EAAjC;AACH;AACJ,KAjBD;AAoBH,CApCD;AAqCAX,SAASA,QAAT,CAAkBmC,OAAlB,CAA0B,UAAUlB,OAAV,EAAmB,CAG5C,CAHD;;AAOAhB,SAASkC,OAAT,CAAiB,UAAUlB,OAAV,EAAkB;AACnCF,YAAQC,GAAR,CAAYC,OAAZ;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA5BD","file":"client.js","sourcesContent":["const net = require(\"net\");\nconst machines = require(\"./machines.js\");\n\n// Create a socket (client) that connects to the server\n\n\nvar versions = [];\nvar date = new Date();\nvar dataToChange = {\n    key: 'one',\n    value: 'creating',\n    date: date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear()\n};\n\n/**\n * Get machines that match with element key\n */\n\ncollect_start = function (machines, cb) {\n    collect(0, machines, {}, cb);\n}\n\ncollect = function (i, machines, versions, cb) {\n\n    if (i >= machines.length)\n        cb(versions);\n\n    console.log(\"MÃ¡quina encontrada: %s\", machine[1].ip);\n\n    var socket = new net.Socket();\n\n    var buffer = '';\n\n    socket.connect(machine[i].ip, \"localhost\", function () {\n        console.log(\"Client: Connected to server\");\n        socket.write(JSON.stringify(['get', dataToChange]) + '\\n');\n    });\n\n    socket.on(\"data\", function (data) {\n        if (data.indexOf('\\n') < 0) {\n            buffer += data;\n        } else {\n            data = data.toString();\n            var msg = buffer + data.substring(0, data.indexOf('\\n'));\n            buffer = data.substring(data.indexOf('\\n') + 1);\n            var dataFromServer = JSON.parse(msg);\n\n            console.log(dataFromServer);\n\n            if (dataFromServer[0] == dataToChange.key) {\n                versions.push([machine[1].ip, dataFromServer]);\n            }\n\n            collect(i+1, machines, versions, cb);\n        }\n    });\n\n\n}\nmachines.machines.forEach(function (machine) {\n\n\n});\n\n\n\nversions.forEach(function (machine){\nconsole.log(machine);\n    // var socket = new net.Socket();\n    //\n    // var buffer = '';\n    //\n    // socket.connect(machine[0], \"localhost\", function () {\n    //     console.log(\"Client by machine: Connected to server\");\n    // });\n    //\n    // socket.on(\"data\", function (data) {\n    //     if (data.indexOf('\\n') < 0) {\n    //         buffer += data;\n    //     } else {\n    //         data = data.toString();\n    //         var msg = buffer + data.substring(0, data.indexOf('\\n'));\n    //         buffer = data.substring(data.indexOf('\\n') + 1);\n    //         var dataFromServer = JSON.parse(msg);\n    //\n    //         console.log(dataFromServer);\n    //\n    //         if(dataFromServer[0] == dataToChange.key){\n    //             versions.push([machine[1].ip, dataFromServer]);\n    //         }\n    //     }\n    // });\n    //\n    // socket.write(JSON.stringify(['put', dataToChange]) + '\\n');\n});"]}