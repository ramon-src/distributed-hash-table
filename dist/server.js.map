{"version":3,"sources":["../server.js"],"names":["net","require","server","createServer","conn","console","log","hashtable","value","date","on","buffer","data","indexOf","toString","msg","substring","dataMessage","JSON","parse","doActions","response","obj","hasKey","tableChecked","forEach","table","key","stringify","write","push","err","error","listen"],"mappings":"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","file":"server.js","sourcesContent":["const net = require(\"net\");\n\nvar server = net.createServer(function (conn) {\n    console.log(\"Server: Client connected\");\n\n    var hashtable = [['one', {value: 1, date: \"4/7/2017\"}], ['two', {value: 2, date: \"4/7/2017\"}]];\n\n    // If connection is closed\n    conn.on(\"end\", function () {\n        console.log('Server: Client disconnected');\n        // Close the server\n        // server.close();\n        // // End the process\n        // process.exit(0);\n    });\n\n    // Handle data from client\n    var buffer = '';\n    conn.on(\"data\", function (data) {\n        if (data.indexOf('\\n') < 0) {\n            buffer += data;\n        } else {\n            data = data.toString();\n            var msg = buffer + data.substring(0, data.indexOf('\\n'));\n            buffer = data.substring(data.indexOf('\\n') + 1);\n            var dataMessage = JSON.parse(msg);\n            doActions(dataMessage);\n        }\n\n        console.log(\"Response from client: %s\", data.response);\n    });\n\n    function doActions(obj) {\n        var hasKey = false;\n        var tableChecked = [];\n        hashtable.forEach(function (table) {\n            console.log(\"Data: %s\", table[0]);\n            if (table[0] == obj[1].key) {\n                hasKey = true;\n                tableChecked = table;\n                console.log(\"Escolhido: %s\", table[0]);\n            }\n        });\n        console.log(obj[1].key);\n\n        if (obj[0] == 'put') {\n            hashtable.forEach(function (table) {\n                console.log(\"Date: %s\", table[1].date);\n                console.log(\"Date: %s\", obj[1].date);\n                if (table[0] == obj[1].key) {\n                    hasKey = true;\n                    tableChecked = table;\n                    table[1].value = obj[1].value;\n                    table[1].date = obj[1].date;\n                    console.log(\"Updated: %s\", JSON.stringify(table));\n                    conn.write(JSON.stringify(hashtable) + '\\n');\n                }\n            });\n            if (!hasKey) {\n                hashtable.push([obj[1].key, {value: obj[1].value, date: obj[1].date}]);\n\n                hashtable.forEach(function (table) {\n                    if (table[0] == obj[1].key) {\n                        console.log(\"Created: %s\", JSON.stringify(table));\n                    }\n                });\n            }\n        }\n\n        if (obj[0] == 'get') {\n            if (hasKey)\n                conn.write(JSON.stringify(tableChecked) + '\\n');\n            else\n                conn.write(JSON.stringify('Não há chave') + '\\n');\n        }\n    }\n\n    conn.on('error', (err) => {\n        console.error(err);\n    });\n});\n\n// Listen for connections\nserver.listen(61337, \"localhost\", function () {\n    console.log(\"Server: Listening\");\n});"]}