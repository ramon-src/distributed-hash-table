{"version":3,"sources":["../controller.js"],"names":["net","require","server","createServer","conn","console","log","on","data","JSON","parse","hashtable","forEach","table","key","response","err","error","write","stringify","listen"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;;AAEA;AACA,IAAIC,SAASF,IAAIG,YAAJ,CAAiB,UAAUC,IAAV,EAAgB;AAC1CC,YAAQC,GAAR,CAAY,0BAAZ;;AAGA;AACAF,SAAKG,EAAL,CAAQ,MAAR,EAAgB,UAASC,IAAT,EAAe;AAC3BA,eAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,kBAAUC,OAAV,CAAkB,UAAUC,KAAV,EAAgB;AAC9BR,oBAAQC,GAAR,CAAY,UAAZ,EAAyBO,MAAM,CAAN,CAAzB;AACA,gBAAGA,MAAM,CAAN,KAAYL,KAAKM,GAApB,EAAwB;AACpBT,wBAAQC,GAAR,CAAY,eAAZ,EAA8BO,MAAM,CAAN,CAA9B;AACH;AACJ,SALD;AAMA;AACA;AACAR,gBAAQC,GAAR,CAAY,0BAAZ,EAAwCE,KAAKO,QAA7C;AACH,KAXD;;AAaA;AACAX,SAAKG,EAAL,CAAQ,KAAR,EAAe,UAASC,IAAT,EAAe;AAC1BA,eAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,kBAAUC,OAAV,CAAkB,UAAUC,KAAV,EAAgB;AAC9B,gBAAGA,MAAM,CAAN,KAAYL,KAAKM,GAApB,EAAwB;AACpBT,wBAAQC,GAAR,CAAY,eAAZ,EAA8BO,MAAM,CAAN,CAA9B;AACH;AACJ,SAJD;AAKA;AACA;AACAR,gBAAQC,GAAR,CAAY,0BAAZ,EAAwCE,KAAKO,QAA7C;AACH,KAVD;;AAYAX,SAAKG,EAAL,CAAQ,OAAR,EAAiB,UAACS,GAAD,EAAS;AACtB;AACA;AACA;AACAX,gBAAQY,KAAR,CAAcD,GAAd;AACH,KALD;AAMA;AACAZ,SAAKc,KAAL,CACIT,KAAKU,SAAL,CACI,EAAEJ,UAAU,mBAAZ,EADJ,CADJ;AAMH,CA5CY,CAAb;;AA8CA;AACAb,OAAOkB,MAAP,CAAc,KAAd,EAAqB,WAArB,EAAkC,YAAY;AAC1Cf,YAAQC,GAAR,CAAY,mBAAZ;AACH,CAFD","file":"controller.js","sourcesContent":["const net = require(\"net\");\n\n// Create a simple server\nvar server = net.createServer(function (conn) {\n    console.log(\"Server: Client connected\");\n\n\n    // Handle data from client\n    conn.on(\"data\", function(data) {\n        data = JSON.parse(data);\n        hashtable.forEach(function (table){\n            console.log(\"Data: %s\",  table[0]);\n            if(table[0] == data.key){\n                console.log(\"Escolhido: %s\",  table[0]);\n            }\n        })\n        // for(var data in hashtable){\n        // }\n        console.log(\"Response from client: %s\", data.response);\n    });\n\n    // Handle data from client\n    conn.on(\"put\", function(data) {\n        data = JSON.parse(data);\n        hashtable.forEach(function (table){\n            if(table[0] == data.key){\n                console.log(\"Escolhido: %s\",  table[0]);\n            }\n        })\n        // for(var data in hashtable){\n        // }\n        console.log(\"Response from client: %s\", data.response);\n    });\n\n    conn.on('error', (err) => {\n        // If the connection is reset by the server, or if it can't\n        // connect at all, or on any sort of error encountered by\n        // the connection, the error will be sent here.\n        console.error(err);\n    });\n    // Let's response with a hello message\n    conn.write(\n        JSON.stringify(\n            { response: \"Hey there client!\" }\n        )\n    );\n\n});\n\n// Listen for connections\nserver.listen(61337, \"localhost\", function () {\n    console.log(\"Server: Listening\");\n});"]}